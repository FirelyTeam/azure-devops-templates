# Repo: FirelyTeam/azure-pipeline-templates
# File: build.yml

parameters:
  # Default values
  dotNetCoreVersion: '3.1.102' # can also be use with wildcards:  latest minor version of 3. , use '3.x'
  useVersionSuffix: true # if true, the build number will be added as or to the existing version suffix
  versionSuffix: ''
  restoreDependencies: false
  nuGetServiceConnections: #required when restoreDependies = true
  nuGetSources: #required when restoreDependies = true
  packageArtifacts: false
  publishArtifacts: false
  packageArtifactName: 'NuGetPackages'
  publishWebProjects: false
  zipAfterPublish: false
  checkoutSubmodules: false  
  pool: {}

jobs:
- job: Build
  pool: ${{ parameters.pool }}
  steps:
  - task: DotNetCoreInstaller@2
    inputs:
      version: ${{ parameters.dotNetCoreVersion }}

  - ${{ if eq(parameters.checkoutSubmodules, 'true') }}:
    - checkout: self
      submodules: true

  - ${{ if eq(parameters.restoreDependencies, 'true') }}:
    - template: restore.yml
      parameters:
        nuGetServiceConnections: ${{ parameters.nuGetServiceConnections }}
        nuGetSources: ${{ parameters.nuGetSources }}

 ## add buildnumber to version suffix parameter
  - powershell: |
      $versionSuffix = ${{ parameters.versionSuffix}}

      if (${{ paramaters.useVersionSuffix -eq $true) 
        {
          if ([string]::IsNullOrEmpty($versionSuffix)) 
        {
          $versionSuffix = $env:BUILD_BUILDNUMBER
        }
        else {
          $versionSuffix = $versionSuffix + "-" + $env:BUILD_BUILDNUMBER
        }
      }    

      Write-Host "Updated Version: $versionSuffix"

      Write-Host "##vso[task.setvariable variable=UpdatedVersionSuffix]$versionSuffix"
    displayName: 'Set versionSuffix to build number'
    condition: succeeded()  

  - script: dotnet build --configuration $(buildConfiguration) --version-suffix $(UpdatedVersionSuffix) --no-restore
    displayName: 'dotnet build $(buildConfiguration) with version suffix  and no restore'
    condition: and(succeeded(), eq('${{ parameters.restoreDependencies }}', 'false')))
    
  - script: dotnet build --configuration $(buildConfiguration) --version-suffix $(UpdatedVersionSuffix)
    displayName: 'dotnet build $(buildConfiguration) with version suffix'
    condition: and(succeeded(), eq('${{ parameters.restoreDependencies }}', 'true')))

  - task: DotNetCoreCLI@2
    displayName: 'dotnet test UnitTests'
    inputs:
      command: test
      projects: '**/*Tests/*Tests.csproj'
      arguments: '--configuration $(buildConfiguration) --no-restore'

  - ${{ if eq(parameters.packageArtifacts, 'true') }}:
    - template: package.yml
      parameters:
        artifactName: ${{parameters.packageArtifactName}}
        useVersionSuffix: ${{ parameters.useVersionSuffix }}
  
  - ${{ if eq(parameters.publishArtifacts, 'true') }}:
    - template: publish.yml
      parameters:
        useVersionSuffix: ${{ parameters.useVersionSuffix }}
        publishWebProjects: ${{ parameters.publishWebProjects }}
        zipAfterPublish: ${{ parameters.zipAfterPublish }}
        
