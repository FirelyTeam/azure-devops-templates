# Repo: FirelyTeam/azure-pipeline-templates
# File: scanDockerImage.yml
# Description: scan an docker image for vulnerabilities

parameters: 
- name: 'dockerRegistryConnection'
  type: 'string'
  displayName: 'The Azure Docker Registry connection'
- name: 'dockerRegistryName'
  type: 'string'
  displayName: 'The name of the Docker registry, like firely.azure.io'
- name: 'dockerImageRepoName'
  type: 'string'
  displayName: 'The name of the Docker repository, like firely/server'
- name: 'dockerImageRepoVersion'
  type: 'string'
  displayName: 'The version of the Docker repository'
- name: 'trivyIgnoreFile'
  type: 'string'
  default: ''
  displayName: 'The version of the Docker repository'

jobs:
- job: scanDockerImage
  displayName: Scan Docker image for vulnerabilities
  steps:
  - checkout: self
  - task: Docker@2
    displayName: Login to ACR
    inputs:
      command: login
      containerRegistry: ${{ parameters.dockerRegistryConnection }}
  - task: Docker@0
    displayName: 'Pull Docker image from private registry'
    inputs:
      containerregistrytype: 'Container Registry'
      dockerRegistryConnection: ${{ parameters.dockerRegistryConnection }}
      action: 'Run a Docker command'
      customCommand: 'pull ${{ parameters.dockerRegistryName }}/${{ parameters.dockerImageRepoName }}:${{ parameters.dockerImageRepoVersion }}'

  - script: | 
      retries=10
      count=0
      while [ $count -lt $retries ]; do
        log_output=$(docker run --rm -v /var/run/docker.sock:/var/run/docker.sock  -v ${{ parameters.trivyIgnoreFile }}:/tmp/trivyignore aquasec/trivy:latest image --ignorefile /tmp/trivyignore --exit-code 1 --format table --scanners vuln,misconfig,secret  ${{ parameters.dockerRegistryName }}/${{ parameters.dockerImageRepoName }}:${{ parameters.dockerImageRepoVersion }} 2>&1)
        result=$?
        echo "$log_output"
        if echo "$log_output" | grep "Fatal" | grep "failed to download artifact from any source" | grep -q "failed to download vulnerability DB"; then
          count=$((count + 1))
          echo "Scan failed due to DB download error. Attempt $count/$retries. Retrying in 30 seconds..."
          sleep 30
        else
          if [ $result -eq 0 ]; then
            echo "Scan completed successfully."
            break
          else
            echo "Scan failed due to other errors."
            exit 1
          fi
        fi
      done
      if [ $count -eq $retries ]; then
        echo "Scan failed after $retries attempts due to DB download error."
        exit 1
      fi
      
    displayName: Scan image with Trivy

#  The Trivy task does not work yet.
#    - task: trivy@1
#      displayName: Scan image with Trivy
#      inputs:
#        image: ${{ parameters.dockerRegistryName }}/${{ parameters.dockerImageRepoName }}:${{ parameters.dockerImageRepoVersion }}
